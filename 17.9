# функция сортировки
def sort(array):
    if len(array) < 2:  # если длина массива равна двум
        return array  # выход из рекурсии
    else:
        middle = len(array) // 2  # ищем середину
        left = sort(array[:middle])  # через рекурсию(вызов функции самой себя но с другими аргументами) делим левую часть
        right = sort(array[middle:])  # и правую
        return merge(left, right)  # выполняем слияние наших списков

# функция для слияния границ
def merge(left, right):
    result = []
    i, j = 0, 0
    # проходимся по левой и правой границе и добавляем в результат взависимости от условия
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    # пока i меньше длины массива добавляем в результат индекс i левой границы
    while i < len(left):
        result.append(left[i])
        i += 1
    # пока i меньше длины массива добавляем в результат индекс i правой границы
    while j < len(right):
        result.append(right[j])
        j += 1

    return result
# функция бинарного поиска
def binary_search(array, element, left, right):
    if left > right:  # если левая граница превысила правую,
        return False  # значит элемент отсутствует

    middle = (right + left) // 2  # находимо середину
    if array[middle] == element:  # если элемент в середине,
        return middle  # возвращаем этот индекс
    elif element < array[middle]:  # если элемент меньше элемента в середине
        # рекурсивно ищем в левой половине
        return binary_search(array, element, left, middle - 1)
    else:  # иначе в правой
        return binary_search(array, element, middle + 1, right)
    return index

while True:
    nums = input('Введите последовательность чисел через пробел: ') # собираем у пользователя последовательность
    # массив куда будем складировать нашу последовательность
    arr_nums = []
    # делаем из нашей строки от пользователя список по пробелу
    nums = nums.split(' ')
    # проходимся по списку
    for i in nums:
        # пытаемся привести элемент к числу если не выходит говорим об этом
        try:
            arr_nums.append(float(i))
        except:
            print(f'В вашей последовательности элемент {i} не может привестись к числу')
    # если длина нашего массива чисел и длинна массива от пользователя не совпадает то просим ввести значение заново
    if len(arr_nums) < len(nums):
        print('пожалуйста, введите вашу последовательность еще раз, встретилась ошибка при проверке на число')
    else:
        break
while True:
    # получаем число для поиска если не выходит говорим об этом и делаем еще раз(через цикл)
    try:
        n = float(input("Введите число для сравнения: "))
        break
    except:
        print('число введено неверно введите еще раз')
# показываем отсортированный массив
print(f'ваша отсортированная последовательность: {sort(arr_nums)}')
# получаем индекс по заданию(номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше или равен этому числу)
result_num = binary_search(arr_nums, n, 0,  len(arr_nums))
print(f'номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше или равен этому числу: {result_num}')
